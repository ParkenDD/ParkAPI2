# Generated by Django 3.2.9 on 2022-01-18 12:59

import datetime
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('locations', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ErrorLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(db_index=True, default=datetime.datetime.utcnow, help_text='Datetime of snapshot (UTC)', verbose_name='Timestamp')),
                ('source', models.CharField(choices=[('module', 'module'), ('pool', 'pool')], db_index=True, max_length=16, verbose_name='Source of error')),
                ('module_name', models.CharField(db_index=True, help_text='Name of the scraper module', max_length=64, verbose_name='Module name')),
                ('pool_id', models.CharField(blank=True, db_index=True, max_length=64, null=True, verbose_name='Pool ID')),
                ('text', models.TextField(blank=True, null=True, verbose_name='Error text')),
                ('stacktrace', models.TextField(blank=True, null=True, verbose_name='Stacktrace')),
            ],
            options={
                'verbose_name': 'Error log',
                'verbose_name_plural': 'Error logs',
            },
        ),
        migrations.CreateModel(
            name='LatestParkingData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(db_index=True, help_text='Datetime of snapshot (UTC)', verbose_name='Timestamp')),
                ('lot_timestamp', models.DateTimeField(blank=True, db_index=True, help_text='Last update of published lot data', null=True, verbose_name='Last update')),
                ('status', models.CharField(choices=[('open', 'open'), ('closed', 'closed'), ('unknown', 'unknown'), ('nodata', 'nodata'), ('error', 'error')], db_index=True, help_text='Status of parking lot (website)', max_length=16, verbose_name='Status')),
                ('num_free', models.IntegerField(blank=True, db_index=True, help_text='Number of free spaces', null=True, verbose_name='Free')),
                ('capacity', models.IntegerField(blank=True, db_index=True, help_text='Number of total available spaces', null=True, verbose_name='Capacity')),
                ('num_occupied', models.IntegerField(blank=True, db_index=True, help_text='Number of occupied spaces', null=True, verbose_name='Occupied')),
                ('percent_free', models.FloatField(blank=True, db_index=True, help_text='Percentage of free spaces', null=True, verbose_name='Free %')),
            ],
            options={
                'verbose_name': 'Latest parking data',
                'verbose_name_plural': 'Latest parking data',
            },
        ),
        migrations.CreateModel(
            name='ParkingPool',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created at')),
                ('date_updated', models.DateTimeField(auto_now=True, db_index=True, verbose_name='Last update')),
                ('pool_id', models.CharField(help_text='This ID uniquely identifies a pool through all history', max_length=64, unique=True, verbose_name='Pool ID')),
                ('name', models.CharField(db_index=True, max_length=128, verbose_name='Name')),
                ('public_url', models.URLField(blank=True, max_length=4096, null=True, verbose_name='Public website')),
                ('source_url', models.URLField(blank=True, max_length=4096, null=True, verbose_name='Data website')),
                ('attribution_license', models.TextField(blank=True, null=True, verbose_name='License')),
                ('attribution_contributor', models.CharField(blank=True, max_length=128, null=True, verbose_name='Contributor')),
                ('attribution_url', models.URLField(blank=True, max_length=4096, null=True, verbose_name='Attribution url')),
            ],
            options={
                'verbose_name': 'Pool',
                'verbose_name_plural': 'Pools',
            },
        ),
        migrations.CreateModel(
            name='ParkingLot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created at')),
                ('date_updated', models.DateTimeField(auto_now=True, db_index=True, verbose_name='Last update')),
                ('lot_id', models.CharField(help_text='This ID uniquely identifies a single parking lot through all history', max_length=64, unique=True, verbose_name='ID of parking lot')),
                ('name', models.CharField(db_index=True, max_length=128, verbose_name='Name')),
                ('address', models.TextField(blank=True, max_length=1024, null=True, verbose_name='Address of parking lot')),
                ('type', models.CharField(blank=True, db_index=True, help_text="Let's see what base types we can crystalize", max_length=64, null=True, verbose_name='Type of lot')),
                ('max_capacity', models.IntegerField(blank=True, db_index=True, help_text='The number of maximum total spaces that have been encountered', null=True, verbose_name='Maximum total spaces')),
                ('has_live_capacity', models.BooleanField(db_index=True, verbose_name='Has live capacity?')),
                ('public_url', models.URLField(blank=True, max_length=4096, null=True, verbose_name='Public website')),
                ('source_url', models.URLField(blank=True, max_length=4096, null=True, verbose_name='Data website')),
                ('geo_point', django.contrib.gis.db.models.fields.PointField(blank=True, db_index=True, null=True, srid=4326, verbose_name='Geo point')),
                ('latest_data', models.OneToOneField(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to='park_data.latestparkingdata', verbose_name='Latest data')),
                ('location', models.ForeignKey(blank=True, help_text='A link to a location description', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='parking_lots', to='locations.location', verbose_name='Location')),
                ('pool', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='park_data.parkingpool', verbose_name='Pool')),
            ],
            options={
                'verbose_name': 'Lot',
                'verbose_name_plural': 'Lots',
            },
        ),
        migrations.CreateModel(
            name='ParkingData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(db_index=True, help_text='Datetime of snapshot (UTC)', verbose_name='Timestamp')),
                ('lot_timestamp', models.DateTimeField(blank=True, db_index=True, help_text='Last update of published lot data', null=True, verbose_name='Last update')),
                ('status', models.CharField(choices=[('open', 'open'), ('closed', 'closed'), ('unknown', 'unknown'), ('nodata', 'nodata'), ('error', 'error')], db_index=True, help_text='Status of parking lot (website)', max_length=16, verbose_name='Status')),
                ('num_free', models.IntegerField(blank=True, db_index=True, help_text='Number of free spaces', null=True, verbose_name='Free')),
                ('capacity', models.IntegerField(blank=True, db_index=True, help_text='Number of total available spaces', null=True, verbose_name='Capacity')),
                ('num_occupied', models.IntegerField(blank=True, db_index=True, help_text='Number of occupied spaces', null=True, verbose_name='Occupied')),
                ('percent_free', models.FloatField(blank=True, db_index=True, help_text='Percentage of free spaces', null=True, verbose_name='Free %')),
                ('lot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='park_data.parkinglot', verbose_name='Parking lot')),
            ],
            options={
                'verbose_name': 'Data',
                'verbose_name_plural': 'Data',
                'unique_together': {('timestamp', 'lot')},
            },
        ),
    ]
